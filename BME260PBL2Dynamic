import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from scipy.integrate import solve_ivp

# %% Initial Values
#reaction for vitmain k reduction (box c)
#rate constants
cK1 = 
cK_1 =
cK2 = 
#reaction for thrombin activation (box d)
#rate constants
dK1 = 2.207*10**-6  #1/M*s
ddK1 = 1*10**8      #1/M*s
ddK_1 = 103         #1/M*s
ddK2 = 57           #1/M*s
#reaction for injury site (box f)
#rate constants
fK1 = 2.5*10**7 #1/M*s
#reaction for fibrin gen (box e)
#rate constants
eK1 = 1*10**8   #1/M*s
eK_1 = 636      #1/M*s
eK2= 84         #1/M*s
#degradation rate constants
k_thrombin_deg = 5.652*10**2    # 1/sec
k_fibrin_deg = 5.185*10**-3     # 1/sec
xa_deg = 3.012*10**-6           #1/sec

#Streams
n1= 3.079*10**-3    #nmol/sec
n2 = 1.385*10**-3   #nmol/sec
n3 = 1.693*10**-3   #nmol/sec
n4 = 1.693*10**-3   #nmol/sec
n5 = 3.2*10**-4     #nmol/sec
n6 = 3.2*10**-4     #nmol/sec
n7 = 3.2*10**-4     #nmol/sec
n8 = 2.826*10**3    #nmol/sec
n9 = 2.333*10**2    #nmol/sec
n10 = 2.826*10**3   #nmol/sec
n11 = 2.826*10**3   #nmol/sec
n12 = 3.2*10**-4    #nmol/sec
n13 = 3.2*10**-4    #nmol/sec
n14 = 2.333*10**2   #nmol/sec
n15 = 3.2*10**-4    #nmol/sec
n16 = 2.333*10**2   #nmol/sec

#known values for steady state
vitKa = 1.45                #nmol/L
Xa = 170                    #nmol/L
proth = 1400                #nmol/L
fbng = 9000                 #nmol/L
thr = 1                     #nmol/L
tf1 = 1.6*10**-5            #nmol/L
X = 160                     #nmol/L
Xi = 160                    #nmol/L
vitKi = 1.45                #nmol/L
fbr = fbng                  #nmol/L
Vol_blood = 5               #Liters
Vol_liver = Vol_blood*0.125 #Liters
cES = 0
ddES = cES
eES = cES
VKORC1 = 1.837*10**-7 #MAYBE CHANGE !!!!!!!!!
Xprime = X

#rate constants
kc2 = 3*10**6 #1/sec
kd22 = 57 #1/sec
kf1 = 0.025 #L/sec*nnmol
ke2= 84 #1/sec


# %% Calculations 
tspan = np.linspace(0, 1000) #timpoint for each minute 
y0 = []

def odefunc(t, y0):
    #box c
    dcVitKi_activation = -cK1*vitKi*VKORC1 + cK_1*cES + n5/Vol_blood
    dVKORC1 = -cK1*vitKi*VKORC1 + cK_1*cES + cK2*cES 
    dES = cK1*vitKi*VKORC1 - cK_1*cES - cK2*cES
    dcVitKa_activation = cK2*cES - n6/Vol_blood

    #box d
    dXprime = -dK1* Xprime * vitKa + n13/Vol_blood
    dXa = dK1*Xprime*vitKa - n15/Vol_blood
    dVitKi_X = dK1*Xprime*vitKi - n7/Vol_blood
    dVitKa_X = -dK1*Xprime*vitKi + n6/Vol_blood

    ddXa = -ddK1*Xa*proth + ddK_1*ddES + ddK2*ddES - k_thrombin_deg*Xa - n15/Vol_blood
    ddproth = -ddK1*Xa*proth + ddK_1*dES +n8/Vol_blood
    ddES = ddK1*Xa*proth - ddK_1*ddES -ddK2*dES
    ddthr = ddK2*ddES - n11/Vol_blood

    #box f
    dTF = -fK1*tf1*X 
    dfX = -fK1*tf1*X + n12/Vol_blood
    dfXprime = fK1*tf1*X - n13/Vol_blood

    #box e
    deThr = -eK1*thr*fbng + eK_1*eES + eK2*eES - k_thrombin_deg + n11/Vol_blood - n10/Vol_blood
    deFbng = -eK1*thr*fbng + eK_1*dES + n9/Vol_blood
    deES = eK1*thr*fbng - eK1*eES - eK2*dES
    deFbr = eK2*eES - k_thrombin_deg - n16/Vol_blood
    

    return [dcVitKi_activation, dVKORC1, dES, dcVitKa_activation, dXprime, dXa, dVitKi_X, dVitKa_X, ddXa, ddproth, ddES, ddthr
            ,dTF, dfX, dfXprime, deThr, deFbng, deES, deFbr ]

output = solve_ivp(odefunc, t_span=(0, 600), y0=y0, method="RK45", t_eval=tspan)

AConcentration = output["y"][0]
CConcentration = output["y"][1]

print(AConcentration[47])